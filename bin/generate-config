#!/bin/sh

# generate-config: Script to generate an OpenVPN configuration file for a client or server.

set -xe

set_key_value() {

	if [ -z "$inline" ]; then
		# Do not inline the value.
		sed -i "s@^$1.*@$1 /etc/openvpn/client/$(basename $2)@"				$template
	else
		# Delete the placeholder entry.
		sed -i "/^$1/d"									$template
		# Inline the data
		echo ""										>>$template
		echo "<$1>"									>>$template
		cat $2										>>$template
		echo "</$1>"									>>$template
	fi
}

generate_client_config() {

	client="$1"
	template="$1.tmpl"

	rm -f /etc/openvpn/client/*
	
	#######################sed -i "s@.*remote .*@remote openvpn-server.example.com 1194@"				$template
	sed -i "s@^ca.*@ca /etc/openvpn/client/ca.crt@"						$template
	sed -i "s@^cert.*@cert /etc/openvpn/client/${client}.crt@"				$template
	sed -i "s@^key.*@key  /etc/openvpn/client/${client}.key@"				$template
	sed -i "s@.*verify-x509-name.*@verify-x509-name ${server} name@"			$template

	# Note: The tls crypt key for the client is named after the server.  This allows a client to have
	# multiple server configurations in the same directory using the same cert and key files but with
	# server specific tls crypt v2 keys.
	sed -i "s@^tls-crypt-v2.*@tls-crypt-v2 /etc/openvpn/client/${server}-tls-crypt-v2.key@"	$template

	# Copy or inline the client files.
	inline="true"
	if [ ! -e pki/inline/${client}.inline ]; then
		set_key_value ca	pki/ca.crt
		set_key_value cert	pki/issued/${client}.crt
	else
		# Use the inline values created automatically by the easyrsa sign-req command.
		sed -i "/^ca /d"			$template
		sed -i "/^cert /d"			$template
		cat pki/inline/${client}.inline		>>$template
	fi
	set_key_value tls-crypt-v2	pki/easytls/${client}-tls-crypt-v2.key

	# Ensure SELinux context right.	 Note: the config file is named for the target server.
	touch /etc/openvpn/client/${server}.conf
	cp $template /etc/openvpn/client/${server}.conf
	rm $template

	# Move the client private key into the configuration directory.
	[ -e pki/private/${client}.key ] && cp pki/private/${client}.key      /etc/openvpn/client/
	ls -lR /etc/openvpn/client/

	zipfile="$(pwd)/${client}.zip"
	pushd /etc/openvpn/client
	zip -u $zipfile *
	popd
}

generate_server_config() {

	server="$1"
	template="$1.tmpl"

	rm -rf /etc/openvpn/server
	mkdir /etc/openvpn/server

	sed -i "s@^cert.*@cert ${server}.crt@"							$template
	sed -i "s@^key.*@key  ${server}.key@"							$template
	sed -i "s@^tls-crypt-v2.*@tls-crypt-v2 ${server}-tls-crypt-v2.key force-cookie@"	$template

	# Copy the server files.
	cp -p pki/ca.crt				/etc/openvpn/server/
	cp -p pki/crl.pem				/etc/openvpn/server/
	cp -p pki/issued/${server}.crt			/etc/openvpn/server/
	cp -p pki/easytls/${server}-tls-crypt-v2.key	/etc/openvpn/server/

	# This needs to be group readable in case of root privilege drop.
	chown root:openvpn /etc/openvpn/server/crl.pem
	chmod 0640 /etc/openvpn/server/crl.pem

	# Create diretories.  These need to be group readable in case of root privilege drop.
	mkdir -p /etc/openvpn/server/ccd
	chown root:openvpn /etc/openvpn/server/ccd
	mkdir -p /etc/openvpn/server/tmp
	chown root:openvpn /etc/openvpn/server/tmp

	if grep -q "^chroot" $template; then
		mkdir -p /etc/openvpn/server/jail

		# Move these to the jail directory and create links so they will work with and without a chroot.
		mv /etc/openvpn/server/crl.pem /etc/openvpn/server/jail/
		ln -s jail/crl.pem /etc/openvpn/server/crl.pem

		mv /etc/openvpn/server/ccd /etc/openvpn/server/jail/
		ln -s jail/ccd /etc/openvpn/server/ccd

		mv /etc/openvpn/server/tmp /etc/openvpn/server/jail/
		ln -s jail/tmp /etc/openvpn/server/tmp
	fi

	cp $template /etc/openvpn/server/${server}.conf
	rm $template

	# Copy the server key file.
	[ -e pki/private/${server}.key ] && cp pki/private/${server}.key	/etc/openvpn/server/

	tar -czvf ${server}.tgz 	-C /etc/openvpn/server .
	
	# Hardcore. Delete it all and restore the files from the tar file.
	rm -rf /etc/openvpn/server
	mkdir /etc/openvpn/server
	tar -xzvf ${server}.tgz		-C /etc/openvpn/server

	systemctl enable openvpn-server@$server
}

# The working directory will typically only be / when running in a container.
# If so, check for mounted ca directory.
if [ "$(pwd)" == "/" ]; then
	if [ ! -d /ca ]; then
		echo "Error: Can't find Certificate Authority directory."
		exit 1
	else
		cd /ca
	fi
fi

# Verify that the ca has been built.
if [ ! -e pki/ca.crt ]; then
	echo "Error: Certificate Authority has not been initialized."
	echo "Have you run build-ca?"
	exit 1
fi

# Show command format.
if [ -z "$1" ]; then
	echo "Format: $(basename $0) client_or_server_name [linux]"
	exit 1
fi

base="$1"

# Ensure that there is a certificate for this request.
if [ ! -e "pki/issued/${base}.crt" ]; then
	echo "Error: Can't find a signed ${base} certificate."
	exit 1
fi

# If there is a config info file, then this is probably a client.
# A client needs to know its server name which is stored in the
# info file when by the sign-request script.
type="server"
if [ -e config/${base}.info ]; then
	type="client"
	source config/${base}.info
fi

# Copy the client or server template locally or from /templates.
template=/templates/${type}.template
[ -e ${type}.template ] && template=${type}.template
cp $template ${base}.tmpl
	
if [ "$type" = "client" ]; then
	generate_client_config $base $server
else
	generate_server_config $base
fi

echo "Script $(basename $0) Done!"

